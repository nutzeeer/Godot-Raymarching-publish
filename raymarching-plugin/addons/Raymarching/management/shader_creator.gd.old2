class_name ShaderGenerator
extends Resource

class ShapeParameter:
	var name: String
	var type: int
	var value: Variant
	
	func _init(p_name: String, p_type: int, p_value: Variant):
		name = p_name
		type = p_type
		value = p_value
	
	# Convert GDScript types to GLSL uniform declarations
	func get_uniform_declaration() -> String:
		match type:
			TYPE_FLOAT:
				return "uniform float "
			TYPE_INT:
				return "uniform int "
			TYPE_VECTOR3:
				return "uniform vec3 "
			TYPE_VECTOR2:
				return "uniform vec2 "
			_:
				push_warning("Unsupported parameter type: " + str(type))
				return "uniform float "  # fallback


class ShapeResource:
	extends RefCounted
	
	var manager: ShapeManager
	var parameters: Dictionary
	var sdf_code: String
	var transform: Transform3D
	
	func _init(p_manager: ShapeManager) -> void:
		manager = p_manager
		parameters = {}
		update()
	
	func update() -> void:
		print("\n=== ShapeResource Update ===")
		var shape = manager.get_current_shape()
		print("Manager:", manager.name)
		print("Current shape:", shape)
		if shape:
			print("Shape class:", shape.get_class())
			parameters = shape.get_all_parameters()
			print("Parameters:", parameters)
			sdf_code = shape.get_sdf_function()
			print("SDF code:", sdf_code)
			transform = manager.global_transform
			print("Transform:", transform)

var shape_resources: Dictionary = {}  # node_id -> ShapeResource

func _init() -> void:
	shape_resources = {}

func add_shape_manager(manager: ShapeManager) -> int:
	var resource = ShapeResource.new(manager)
	var id = manager.get_instance_id()
	shape_resources[id] = resource
	return id

func generate_shader() -> String:
	var shader_code = "shader_type spatial;\n"
	shader_code += "render_mode unshaded;\n\n"
	
	#generate_uniform_declaration()

	# Add uniform declarations
	shader_code += generate_uniforms()
	
	
	# Add modifier includes and structures
	#shader_code = integrate_modifiers(shader_code)
	shader_code += """
	// TODO: Implement ray modifiers
	// Will include:
	// - For loop modifiers for ray direction and position
	// - Return line modifiers for SDF calculations
	// See for_loop_modifiers.gd and sdf_return_line_modifiers.gd
	"""
		
	# Add SDF functions from all shapes
	shader_code += generate_sdf_functions()

		
	# Add map function
	shader_code += generate_map_function()
	
	# Add utility functions
	shader_code += generate_utility_functions()

	# Add main shader code
	shader_code += generate_main_code()
	
	return shader_code

func generate_uniforms() -> String:
	var code = """
uniform int MAX_STEPS;
uniform float MAX_DISTANCE;
uniform float SURFACE_DISTANCE;
uniform float NORMAL_PRECISION;
"""
	
	for id in shape_resources:
		code += generate_shape_uniforms(id)
	return code


# Modify generate_shape_uniforms to use ShapeParameter
func generate_shape_uniforms(id: int) -> String:
	var resource = shape_resources[id]
	var code = "\n// Shape ${id} uniforms\n"
	code += "uniform mat4 shape${id}_transform;\n"
	
	# Wrap each parameter in a ShapeParameter object
	for param_name in resource.parameters:
		var param_value = resource.parameters[param_name]
		var param = ShapeParameter.new(param_name, typeof(param_value), param_value)
		code += param.get_uniform_declaration() + "shape${id}_" + param_name + ";\n"
	
	return code.replace("${id}", str(id))


func generate_uniform_declaration(id: int, name: String, param: ShapeParameter) -> String:
	return param.get_uniform_declaration() + "shape${id}_" + name + ";\n"


func integrate_modifiers(code: String) -> String:
	return """
#include "for_loop_modifiers.gdshaderinc"

${code}

vec3 apply_modifiers(vec3 p, RayModifiers mods) {
	return apply_modifier_vec3(p, mods.pos_add, mods.pos_mul);
}
""".replace("${code}", code)

func generate_utility_functions() -> String:
	return """
vec3 getNormal(vec3 p) {
	vec2 e = vec2(NORMAL_PRECISION, 0.0);
	return normalize(vec3(
		map(p + e.xyy) - map(p - e.xyy),
		map(p + e.yxy) - map(p - e.yxy),
		map(p + e.yyx) - map(p - e.yyx)
	));
}

float get_soft_shadow(vec3 ro, vec3 rd, float min_t, float max_t, float k) {
	float result = 1.0;
	float t = min_t;
	for(int i = 0; i < 256 && t < max_t; i++) {
		float h = map(ro + rd * t);
		if(h < 0.001) return 0.0;
		result = min(result, k * h / t);
		t += h;
	}
	return result;
}
"""

func generate_sdf_functions() -> String:
	var code = ""
	for resource in shape_resources.values():
		if resource.sdf_code:
			code += resource.sdf_code + "\n"
	return code

func generate_map_function() -> String:
	var code = """
float map(vec3 p) {
	float final_distance = MAX_DISTANCE;
"""
	
	for id in shape_resources:
		var resource = shape_resources[id]
		var shape = resource.manager.get_current_shape()
		
		code += """
	{
		// Transform point to local space
		vec3 local_p = (inverse(shape%s_transform) * vec4(p, 1.0)).xyz;
		float d = %s;
		final_distance = min(final_distance, d);
	}
""" % [id, shape.get_sdf_call()]
	
	code += """
	return final_distance;
}
"""
	return code

func get_shape_function_name(resource: ShapeResource) -> String:
	var shape = resource.manager.get_current_shape()
	return "sd" + shape.get_class() if shape else "sdSphere"

func get_shape_parameters_string(resource: ShapeResource) -> String:
	var params = []
	for param_name in resource.parameters:
		if param_name not in ["position", "rotation", "scale"]:
			params.append(param_name)
	return ", " + ", ".join(params) if params else ""

func generate_main_code() -> String:
	return """
void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}

void fragment() {
	vec3 weird_uv = vec3(SCREEN_UV * 2.0 - 1.0, 0.0);
	vec4 camera = INV_VIEW_MATRIX * INV_PROJECTION_MATRIX * vec4(weird_uv, 1.0);
	
	vec3 ray_origin = (INV_VIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	vec3 ray_dir = normalize(camera.xyz);
	
	/*
	// Apply modifiers
	ray_origin = apply_modifiers(ray_origin, RayModifiers);
	ray_dir = apply_modifiers(ray_dir, RayModifiers);
	*/
	
	float t = 0.0;
	bool hit = false;
	vec3 hit_normal;
	vec3 hit_pos;
	
	for (int i = 0; i < MAX_STEPS; i++) {
		vec3 pos = ray_origin + ray_dir * t;
		//pos = apply_modifiers(pos, RayModifiers);
		
		float dist = map(pos);
		
		if (dist < SURFACE_DISTANCE) {
			hit = true;
			hit_pos = pos;
			hit_normal = getNormal(pos);
			break;
		}
		
		t += dist;
		
		if (t > MAX_DISTANCE) {
			break;
		}
	}
	
	if (hit) {
		ALPHA = 1.0;
		ALBEDO = hit_normal * 0.5 + 0.5;
		
		// Calculate lighting
		vec3 light_dir = normalize(vec3(1.0, 1.0, -1.0));
		float diffuse = max(0.0, dot(hit_normal, light_dir));
		float shadow = get_soft_shadow(hit_pos, light_dir, 0.1, 10.0, 32.0);
		
		ALBEDO *= (diffuse * shadow + 0.1);
	} else {
		discard;
	}
}
"""

func update_shader_parameters(material: ShaderMaterial) -> void:
	# Update global parameters
	material.set_shader_parameter("MAX_STEPS", 100)
	material.set_shader_parameter("MAX_DISTANCE", 1000.0)
	material.set_shader_parameter("SURFACE_DISTANCE", 0.001)
	material.set_shader_parameter("NORMAL_PRECISION", 0.001)
	
	# Update shape-specific parameters
	for resource in shape_resources.values():
		var prefix = "shape" + str(resource.manager.get_instance_id()) + "_"
		for param_name in resource.parameters:
			material.set_shader_parameter(
				prefix + param_name,
				resource.parameters[param_name]
			)
		
		# Set transform parameters
		material.set_shader_parameter(
			prefix + "transform",
			resource.transform
		)
