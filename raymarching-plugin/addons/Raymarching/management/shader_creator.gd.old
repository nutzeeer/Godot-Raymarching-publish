class_name ShaderGenerator
extends Resource

var shape_manager: ShapeManager

func _init(p_shape_manager: ShapeManager) -> void:
	shape_manager = p_shape_manager

func generate_shader() -> String:
	var shader_code = "shader_type spatial;\n\n"
	
	# Add uniform declarations
	shader_code += generate_uniforms()
	
	# Add constant declarations
	shader_code += generate_constants()
	
	# Add modifier structures and functions
	shader_code += generate_modifier_code()
	
	# Add utility functions
	shader_code += generate_utility_functions()
	
	# Add SDF functions from shapes
	shader_code += generate_sdf_functions()
	
	# Add map function that combines SDFs
	shader_code += generate_map_function()
	
	# Add main shader code
	shader_code += generate_main_code()
	
	return shader_code

func generate_uniforms() -> String:
	return """
	uniform float MAX_STEPS = 100;
	uniform float MAX_DISTANCE = 100.0;
	uniform float SURFACE_DISTANCE = 0.001;
	uniform bool ENABLE_INFINITE_FLOOR = false;
	uniform float FLOOR_HEIGHT = -2.0;
	uniform vec4 FLOOR_COLOR = vec4(0.2, 0.2, 0.2, 1.0);
	"""

func generate_constants() -> String:
	return """
	const float NORMAL_PRECISION = 0.001;
	"""

func generate_modifier_code() -> String:
	return """
	struct RayModifiers {
		vec3 ro_mul, rd_mul, pos_mul;
		float surf_mul, max_mul;
		vec3 ro_add, rd_add, pos_add;
		float surf_add, max_add;
	};

	uniform RayModifiers for_loop_modifiers = RayModifiers(
		vec3(1.0), vec3(1.0), vec3(1.0), 1.0, 1.0,  // mul
		vec3(0.0), vec3(0.0), vec3(0.0), 0.0, 0.0   // add
	);

	vec3 apply_modifier_vec3(vec3 base_value, vec3 add_mod, vec3 mul_mod) {
		return (base_value + add_mod) * mul_mod;
	}

	float apply_modifier(float base_value, float add_mod, float mul_mod) {
		return (base_value + add_mod) * mul_mod;
	}
	"""

func generate_utility_functions() -> String:
	return """
	vec3 getNormal(vec3 p) {
		vec2 e = vec2(NORMAL_PRECISION, 0.0);
		return normalize(vec3(
			map(p + e.xyy) - map(p - e.xyy),
			map(p + e.yxy) - map(p - e.yxy),
			map(p + e.yyx) - map(p - e.yyx)
		));
	}
	"""

func generate_sdf_functions() -> String:
	var sdf_code = ""
	if shape_manager and shape_manager.get_current_shape():
		sdf_code += shape_manager.get_current_shape().get_sdf_function()
	return sdf_code

func generate_map_function() -> String:
	return """
	float map(vec3 p) {
		// Simple sphere for testing
		return length(p) - 1.0;
	}
	"""

func generate_main_code() -> String:
	return """
	void vertex() {
		POSITION = vec4(VERTEX.xy, 1.0, 1.0);
	}
	
	void fragment() {
		vec3 weird_uv = vec3(SCREEN_UV * 2.0 - 1.0, 0.0);
		vec4 camera = INV_VIEW_MATRIX * INV_PROJECTION_MATRIX * vec4(weird_uv, 1.0);
		
		vec3 ray_origin = (INV_VIEW_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
		vec3 ray_dir = normalize(camera.xyz);
		
		// Apply for loop modifiers
		ray_origin = apply_modifier_vec3(ray_origin, for_loop_modifiers.ro_add, for_loop_modifiers.ro_mul);
		ray_dir = apply_modifier_vec3(ray_dir, for_loop_modifiers.rd_add, for_loop_modifiers.rd_mul);
		
		float t = 0.0;
		bool hit = false;
		vec3 hit_normal;
		vec3 hit_pos;
		
		for (int i = 0; i < MAX_STEPS; i++) {
			vec3 pos = ray_origin + ray_dir * t;
			pos = apply_modifier_vec3(pos, for_loop_modifiers.pos_add, for_loop_modifiers.pos_mul);
			
			float dist = map(pos);
			dist = apply_modifier(dist, for_loop_modifiers.surf_add, for_loop_modifiers.surf_mul);
			
			if (dist < SURFACE_DISTANCE) {
				hit = true;
				hit_pos = pos;
				hit_normal = getNormal(pos);
				break;
			}
			
			t += dist;
			
			if (t > MAX_DISTANCE * for_loop_modifiers.max_mul + for_loop_modifiers.max_add) {
				break;
			}
		}
		
		if (hit) {
			ALPHA = 1.0;
			if (ENABLE_INFINITE_FLOOR && abs(hit_pos.y - FLOOR_HEIGHT) < SURFACE_DISTANCE) {
				ALBEDO = FLOOR_COLOR.rgb;
			} else {
				ALBEDO = hit_normal * 0.5 + 0.5;
			}
		} else {
			discard;
		}
	}
	"""
